version: '3.8'

services:
  nginx:
    image: nginx:1.25-alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
      - static_volume:/code/static
      - media_volume:/code/media
    depends_on:
      - web
    restart: unless-stopped

  web:
    build: .
    command: >
      bash -c "python manage.py migrate && 
      python manage.py collectstatic --noinput && 
      gunicorn config.wsgi:application --bind 0.0.0.0:8000"
    env_file:
      - .env
    environment:
      - DEBUG=False
      - DATABASE_HOST=db
    volumes:
      - static_volume:/code/static
      - media_volume:/code/media
    expose:
      - "8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started

  db:
    image: postgres:17.5
    volumes:
      - postgres_data:/var/lib/postgresql/data
    env_file:
      - ./.env
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      SECRET_KEY: ${SECRET_KEY}
    expose:
      - "5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U NataliaBazhina -d habits" ]
      interval: 30s
      timeout: 10s
      retries: 5

  redis:
    image: redis:7.2-alpine
    restart: always
    expose:
      - "6379"

  celery:
    build: .
    command: >
      bash -c "celery -A config worker -l info"
    env_file:
      - .env
    volumes:
      - .:/code
    depends_on:
      - db
      - redis

  celery_beat:
    build: .
    command: >
      bash -c "sleep 10 && celery -A config worker --beat --loglevel=info"
    env_file:
      - .env
    volumes:
      - .:/code
    depends_on:
      - db
      - redis
      - web

volumes:
  postgres_data:
  static_volume:
  media_volume: